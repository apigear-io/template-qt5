{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
{% assign class = interface.name %}

#include "{{class|lower}}.h"

#include <QtQml>

#include "../api/agent.h"

{{class}}::{{class}}(QObject *parent)
    : Abstract{{class}}(parent)
{% for property in interface.properties %}
    , m_{{property.name}}({{property|qtDefault}})
{% endfor %}
{
}

{{class}}::~{{class}}()
{
}

{% for property in interface.properties %}
{% assign name = property.name %}

void {{class}}::set{{name|capital}}({{property|qtParam}})
{
    if (m_{{name}} != {{name}}) {
        m_{{name}} = {{name}};
        emit {{name}}Changed({{name}});
        {{interface.name}}Agent::trace_state(this);
    }
}

{{property|qtReturn}} {{class}}::{{name}}() const
{
    return m_{{name}};
}

{% endfor %}
{%- for operation in interface.operations %}

{{operation|qtReturn}} {{class}}::{{operation.name}}({{operation|qtParams}})
{
    qDebug() << Q_FUNC_INFO;
    {% assign space = ', ' %}
    {{interface.name}}Agent::trace_{{operation}}(this{% if operation.params.first %}{{space}}{% endif %}{{ operation.params | join: ', ' }});
    return {{operation|qtDefault}};
}
{% endfor %}
