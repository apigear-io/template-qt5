{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
#include "agent.h"
#include "../../shared/agentclient.h"


{% for interface in module.interfaces %}
{% assign class = interface.name | append: "Agent" %}

{{class}}::{{class}}()
{
}

QVariantMap {{class}}::capture_state(Abstract{{interface.name}}* obj)
{
    return QVariantMap{
    {% for property in interface.properties %}
        { "{{property}}", QVariant::fromValue(obj->{{property.name}}()) },
    {% endfor %}
    };
}

void {{class}}::trace_state(Abstract{{interface.name}}* obj)
{
    const QVariantMap &fields_ = capture_state(obj);
    AgentClient::instance()->traceState("{{module}}.{{interface}}", fields_);
}

{% for operation in interface.operations %}
void {{class}}::trace_{{operation.name}}(Abstract{{interface.name}}* obj{{operation|qtParams: ', '}})
{
    const QVariantMap &params_ {
        {% for param in operation.params %}
        { "{{param.name}}", QVariant::fromValue({{param.name}}) },
        {% endfor %}
    };
    AgentClient::instance()->traceCall("{{module}}.{{interface}}#{{operation}}", params_);
}
{% endfor %}
{% endfor %}