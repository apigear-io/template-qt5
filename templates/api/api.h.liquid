{% comment %} // Copyright (c) ApiGear UG 2020 {% endcomment -%}
{{ module | licGPLcpp -}}
#pragma once

#include <QtCore>
#include <QtCore/QtGlobal>

#if defined({{ module.name | constant }}_LIBRARY)
#  define {{ module.name | constant }}_EXPORT Q_DECL_EXPORT
#else
#  define {{ module.name | constant }}_EXPORT Q_DECL_IMPORT
#endif

{% for enum in module.enums %}
{% assign class = enum.name %}

// ********************************************************************
// Enumeration {{class}}
// ********************************************************************

class {{ module.name | constant }}_EXPORT {{class}} : public QObject {
    Q_OBJECT
public:
    {{class}}(QObject *parent = nullptr)
        : QObject(parent)
        {}
    enum {{class}}Enum {
    {% for member in enum.members %}
        {{member.name}} = {{member.value}},

    {% endfor %}
    };
    Q_ENUM({{class}}Enum)

    static {{class}}Enum toEnum(quint8 v, bool *ok);
};
Q_DECLARE_METATYPE({{class}}::{{class}}Enum)

inline QDataStream &operator<<(QDataStream &ds, const {{class}}::{{class}}Enum &obj)
{
    quint8 val = obj;
    ds << val;
    return ds;
}

inline QDataStream &operator>>(QDataStream &ds, {{class}}::{{class}}Enum &obj) {
    bool ok;
    quint8 val;
    ds >> val;
    obj = {{class}}::toEnum(val, &ok);
    if (!ok) {
        qWarning() << "received an invalid enum value for typeState, value =" << val;
    }
    return ds;
}
{% endfor %}
{%- for struct in module.structs %}
{% assign class = struct.name %}
// ********************************************************************
// {{class}} struct
// ********************************************************************

class {{ module.name | constant }}_EXPORT {{class}}
{
    Q_GADGET
{% for field in struct.fields %}
    Q_PROPERTY({{field|qtReturn}} {{field.name}} READ {{field.name}} WRITE set{{field.name|capital}})
{% endfor %}

public:
    {{class}}();

{% for field in struct.fields %}
    void set{{field.name|capital}}({{field|qtParam}});
    {{field|qtReturn}} {{field.name}}() const;

{% endfor %}

    bool operator==(const {{class}} &other) const;
    bool operator!=(const {{class}} &other) const;

private:
{% for field in struct.fields %}
    {{field|qtReturn}} m_{{field.name}};
{% endfor %}
};

Q_DECLARE_METATYPE({{class}})

QDataStream &operator<<(QDataStream &stream, const {{class}} &obj);
QDataStream &operator>>(QDataStream &stream, {{class}} &obj);

// ********************************************************************
// {{class}} struct factory
// ********************************************************************

class {{ module.name | constant }}_EXPORT {{class}}Factory : public QObject {
    Q_OBJECT
public:
    Q_INVOKABLE {{class}} create();
};


{% endfor %}
{%- for interface in module.interfaces %}

{% assign class = interface.name | prepend: "Abstract" %}

// ********************************************************************
// {{class}} pure interface
// ********************************************************************


class {{ module.name | constant }}_EXPORT {{class}} : public QObject {
    Q_OBJECT
public:
    {{class}}(QObject * parent=nullptr);
{% for property in interface.properties %}
    virtual void set{{property.name|capital}}({{property|qtParam}}) = 0;
    virtual {{property|qtReturn}} {{property.name}}() const = 0;
{% endfor %}

{% for operation in interface.operations %}
    virtual {{operation|qtReturn}} {{operation.name}}({{operation|qtParams}}) = 0;
{% endfor %}
signals:
{% for signal in interface.signals %}
    void {{signal.name}}({{signal|qtParams}});
{% endfor %}
{% for property in interface.properties %}
    void {{property.name}}Changed({{property|qtParam}});
{% endfor %}
};
{% endfor %}


// ********************************************************************
// Interface Factory
// ********************************************************************

class {{ module.name | constant }}_EXPORT ApiFactoryInterface
{
public:
{% for interface in module.interfaces %}
    virtual Abstract{{interface.name}}* create{{interface.name|upperFirst}}(QObject *parent) = 0;
{% endfor %}
};

